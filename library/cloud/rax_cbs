#!/usr/bin/python -tt
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: rax_network
short_description: create / delete a Rackspace Public Cloud Block Storage Volume
description:
  - creates / deletes a Rackspace Public Cloud Block Storage Volume.
version_added: "1.4"
options:
  api_key:
    description:
      - Rackspace API key (overrides C(credentials))
  attach:
    description:
      - Specify the server to attach the volume to and the mountpoint
  credentials:
    description:
      - File to find the Rackspace credentials in (ignored if C(api_key) and
        C(username) are provided)
    default: null
    aliases: ['creds_file']
  description:
    description:
      - Description of volume
  meta:
    description:
      - A hash of metadata to associate with the instance
  name:
    description:
      - Name to give the volume
    required: true
  region:
    description:
      - Region to create the network in
    default: DFW
  size:
    description:
      - Size (in GB) of the volume
    required: true
  state:
    description:
      - Indicate desired state of the resource
    choices: ['present', 'absent']
    default: present
  type:
    description:
      - Type of volume to create
    choices: ['SATA', 'SSD']
    required: true
  username:
    description:
      - Rackspace username (overrides C(credentials))
  wait:
    description:
      - Wait for the volume to be in state 'available' or 'in-use' before returning
    default: 'no'
    choices: ['yes', 'no']
  wait_timeout:
    description:
      - How long before wait gives up, in seconds
    default: 300
requirements: ['pyrax']
author: Matt Martz
notes:
  - The following environment variables can be used, C(RAX_USERNAME),
    C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).
  - C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file
    appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)
  - C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file
  - C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)
'''

EXAMPLES = '''
- name: Build a Cloud Block Storage Volume
  gather_facts: False
  connection: local
  hosts: local
  tasks:
    - name: Volume create request
      local_action:
        module: rax_cbs
        credentials: ~/.raxpub
        name: my-vol
        description: My CBS Volume
        type: SATA
        size: 100
        region: DFW
        state: present
'''

import sys
import os
from types import NoneType

try:
    import pyrax
    from pyrax.exceptions import NotFound, NoUniqueMatch
except ImportError:
    print("failed=True msg='pyrax required for this module'")
    sys.exit(1)

NON_CALLABLES = (basestring, bool, dict, int, list, NoneType)


def cloud_blockstorage(module, attach, description, meta, name, size, state,
                       volume_type, wait, wait_timeout):
    for arg in (name, size, state, volume_type):
        if not arg:
            module.fail_json(msg='%s is required for rax_cbs' % arg)

    changed = False
    volume = None
    result = {}

    cbs = pyrax.cloud_blockstorage

    if state == 'present':
        if attach and ('instance' not in attach or 'mount' not in attach):
                module.fail_json(msg='"instance" and "mount" required for '
                                     '"attach"')

        try:
            volume = cbs.find(display_name=name)
        except NoUniqueMatch, e:
            module.fail_json(msg='%s' % e.message)
        except NotFound, e:
            try:
                volume = cbs.create(name, size=size, volume_type=volume_type,
                                    description=description, metadata=meta)
                if attach:
                    volume.attach_to_instance(attach['instance'],
                                              attach['mount'])
                changed = True
            except Exception, e:
                raise
                module.fail_json(msg='%s' % e.message)
        except Exception, e:
            module.fail_json(msg='%s' % e.message)

        if wait:
            if attach:
                status = 'in-use'
            else:
                status = 'available'

            attempts = wait_timeout / 5
            pyrax.utils.wait_until(volume, 'status', status,
                                   interval=5, attempts=attempts)
            if volume.status != status and volume.status != 'ERROR':
                result['msg'] = 'Timeout waiting for volume creation'
            elif volume.status != status:
                result['msg'] = 'Volume creation failed'

    elif state == 'absent':
        try:
            volume = cbs.find(display_name=name)
            volume.delete()
            changed = True
        except NoUniqueMatch, e:
            module.fail_json(msg='%s' % e.message)
        except NotFound, e:
            pass
        except Exception, e:
            module.fail_json(msg='%s' % e.message)

    instance = {}
    if volume:
        for key, value in vars(volume).iteritems():
            if (isinstance(value, NON_CALLABLES) and not key.startswith('_')):
                instance[key] = value

    result.update(dict(changed=changed, volume=instance))
    if 'msg' in result:
        module.fail_json(**result)
    else:
        module.exit_json(**result)


def main():
    module = AnsibleModule(
        argument_spec=dict(
            api_key=dict(),
            attach=dict(type='dict'),
            credentials=dict(aliases=['creds_file']),
            description=dict(),
            meta=dict(type='dict', default={}),
            name=dict(required=True),
            region=dict(default='DFW'),
            size=dict(type='int', required=True),
            state=dict(default='present',
                       choices=['present', 'absent']),
            type=dict(default='SATA', choices=['SATA', 'SSD']),
            username=dict(),
            wait=dict(type='bool', default=True),
            wait_timeout=dict(type='int', default=300),
        )
    )

    api_key = module.params.get('api_key')
    attach = module.params.get('attach')
    credentials = module.params.get('credentials')
    description = module.params.get('description')
    meta = module.params.get('meta')
    name = module.params.get('name')
    region = module.params.get('region')
    size = module.params.get('size')
    state = module.params.get('state')
    volume_type = module.params.get('type')
    username = module.params.get('username')
    wait = module.params.get('wait')
    wait_timeout = module.params.get('wait_timeout')

    try:
        username = username or os.environ.get('RAX_USERNAME')
        api_key = api_key or os.environ.get('RAX_API_KEY')
        credentials = (credentials or
                       os.environ.get('RAX_CREDENTIALS') or
                       os.environ.get('RAX_CREDS_FILE'))
        region = region or os.environ.get('RAX_REGION')

    except KeyError, e:
        module.fail_json(msg='Unable to load %s' % e.message)

    try:
        pyrax.set_setting('identity_type', 'rackspace')
        if api_key and username:
            pyrax.set_credentials(username, api_key=api_key, region=region)
        elif credentials:
            credentials = os.path.expanduser(credentials)
            pyrax.set_credential_file(credentials, region=region)
        else:
            raise Exception('No credentials supplied!')
    except Exception, e:
        module.fail_json(msg='%s' % e.message)

    cloud_blockstorage(module, attach, description, meta, name, size, state,
                       volume_type, wait, wait_timeout)

from ansible.module_utils.basic import *

main()
